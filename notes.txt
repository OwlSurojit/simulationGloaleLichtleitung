Ea = (300 + 21000 sin γs) × lx
γs = acos((pow(earthRadius, 2) + x*x + y*y + z*z + 2*z*sunDist) / (2*earthRadius*sqrt(x*x + y*y + pow(z+sunDist,2)))) - HALF_PI
Lichtstrom einer Straßenlaterne: ΦV = EV * A = 9,625lx * (49/4)π m² ~= 370,4lm

ADDITIONAL FEATURE: To manage the light flow direction to be the same for all cables, the cableVertices need to be sorted when the cableConstruction is finished and before the cable is saved.									DONE
NECESSARY FEATURE: The lamps should only light up if there isn't enough light around them.				DONE


10646500
bri:177.44165
bri:177.44165
bri:177.44165
10649000
bri:177.4833
bri:177.4833
bri:177.4833
10649500 lm
bri:177.49165 lm			(= collFlux/(noLamps*noLanterns))
bri:177.49165
bri:177.49165
10648500
bri:177.475
bri:177.475
bri:177.475
10645500
bri:177.425
bri:177.425
bri:177.425


BUG:
The loaded cable still connects to itself...		SOLVED

NECESSARY FEATURE:
manage light source overflow: display spheres if there are too many lamps		DECIDED UNNECESSARY

ALSO: the flux splitting isn't working yet (the second cable's lamp isn't lighting up (in the exmp.: cable[4]; succesfully connected to cable[3]))									SOLVED

NEXT TEST: construct a cable without collectors, but with lamps; then construct one with a collector, connected to the first one...												WORKING

ANOTHER TEST: What happens if a cableVertex is both a lamp/collector and a fork?			WORKING

ANOTHER TEST: construct two intersecting cables. They should not be connected...		WORKING


IMPORTANT FEATURE: tell the user, the cable connection is a complex process and they need to connect them through the vertices which should then be displayed in construction mode...			DONE

SORTING FUNCTION!!!					DONE

TELL THE USER ONE CAN ONLY CONNECT ONE CABLE TO A VERTEX!!!		DONE